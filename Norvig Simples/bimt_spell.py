# -*- coding: utf-8 -*-
"""bimt-spell.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jtSHBcnOhRHnh8NbstqEWspFTtHZS-Us
"""

import re
from collections import Counter

def multiple_cut(word):
   return re.sub('([a-zA-Z])(?=(\\1)+)', '', word)




"""Spelling Corrector in Python 3; see http://norvig.com/spell-correct.html

Copyright (c) 2007-2016 Peter Norvig
MIT license: www.opensource.org/licenses/mit-license.php
"""

################ Spelling Corrector 



def words(text): return re.findall(r'\w+', text.lower())


# read from Gutemberg Project by Xexeo
#WORDS = Counter(words(open('big.txt').read()))
import nltk
nltk.download('reuters')
nltk.download('gutenberg')
WORDS=Counter(words(nltk.corpus.gutenberg.raw()+nltk.corpus.reuters.raw()))
#WORDS=Counter(words(reuters.raw()))

print("Palavras -> ",len(WORDS))

def P(word, N=sum(WORDS.values())): 
    "Probability of `word`."
    return WORDS[word] / N

def correction(word): 
    "Most probable spelling correction for word."
    return max(candidates(word), key=P)

def candidates(word): 
    "Generate possible spelling corrections for word."
    return (known([word]) or known(edits1(word)) or known(edits2(word)) or [word])

def known(words): 
    "The subset of `words` that appear in the dictionary of WORDS."
    return set(w for w in words if w in WORDS)

def word_splits(word):
  return [(word[:i], word[i:])    for i in range(len(word) + 1)]

def edits1(word):
    "All edits that are one edit away from `word`."
    letters    = 'abcdefghijklmnopqrstuvwxyz'
    word = multiple_cut(word) # modificação por G. Xexéo para tirar letras dobradas
    splits     = word_splits(word)
    deletes    = [L + R[1:]               for L, R in splits if R]
    transposes = [L + R[1] + R[0] + R[2:] for L, R in splits if len(R)>1]
    replaces   = [L + c + R[1:]           for L, R in splits if R for c in letters]
    inserts    = [L + c + R               for L, R in splits for c in letters]
    return set(deletes + transposes + replaces + inserts)

def edits2(word): 
    "All edits that are two edits away from `word`."
    return (e2 for e1 in edits1(word) for e2 in edits1(e1))

test_words = ['wale', 'batteri', 'bicicly', 'marquet', 'incridible', 'replice', 'arrangid', 'testir','goooooooooooooal', 'maarketinj','maaaarketinj','maaaaaaaaarketinj','cooperative','cooooperative']

if __name__ == "__main__":  

  
    for w in test_words:
      print(w+" -> "+correction(w))
    
    print(multiple_cut('gooooooooal'))
    
    print(len(edits1("word")))
    
    print(len(list(edits2("word"))))

