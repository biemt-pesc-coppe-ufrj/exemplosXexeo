# -*- coding: utf-8 -*-
"""bimt-language-model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/167bwnw3dfkOgGuzQFdFKHC_3I_GnZMDg

# Escolhe alguns textos do Gutemberg (NLTK)
"""

import nltk
nltk.download('gutenberg')
docs=[0]*6  # Vetor de Documentos

# Escolhe 6 documentos entre os fornecidos
docs[0]=nltk.corpus.gutenberg.words('austen-sense.txt')
docs[1]=nltk.corpus.gutenberg.words('shakespeare-caesar.txt')
docs[2]=nltk.corpus.gutenberg.words('shakespeare-hamlet.txt')
docs[3]=nltk.corpus.gutenberg.words('shakespeare-macbeth.txt')
docs[4]=nltk.corpus.gutenberg.words('melville-moby_dick.txt')
docs[5]=nltk.corpus.gutenberg.words('carroll-alice.txt')

print(docs[0][:100])

"""# Cria um modelo de unigramas

1. Usando Porter Stemmer para buscar o radical
1. Pegando só palavras com mais de 2 letras e começando por letra (tira os números)
"""

from nltk.stem import PorterStemmer 

ps = PorterStemmer()

def gen_unigram_model(doc):
  tokens = {}
  total = 0
  for token in doc:
    tokst = ps.stem(token)
    if len(tokst)>2 and ("a"<=tokst[0]<="z"):
      tokens[tokst] = tokens.get(tokst,0)+1
      total += 1
  for key in tokens:
    tokens[key] /= total
  return tokens

test_model = gen_unigram_model(docs[5])

i = 0
for key in test_model:
  print(f"{key:10} ==> {test_model[key]:10f} ")
  i += 1
  if i > 100:
    break

print(list(test_model.items()))

"""# Cria o modelo invertido para gerar documentos

Isso não é usado na recuperação, foi feito só para teste
"""

def invert_model(model):
  ans = []
  for key, value in model.items():
    temp = [key,value]
    ans.append(temp)
  ans.sort()
  total = 0
  for item in ans:
    item[1] += total
    total = item[1]
  return(ans)

import random

def next_emission(imodel):
  luck = random.random()
  last_item = imodel[0]
  for item in imodel:
    if luck < item[1]:
      return item[0]

def generate(how_many,model):
  imodel = invert_model(model)
  sentence = []
  for i in range(how_many):
    sentence.append(next_emission(imodel))
  return sentence

print(invert_model(test_model))

models = []
for doc in docs:
  models.append(gen_unigram_model(doc))
  print(generate(5,models[-1]))